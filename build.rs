use std::fs;
use std::path::Path;

use regex::Regex;

const INPUT_PATH: &str = "examples/README.md";
const OUTPUT_DIR: &str = "docs/generated";
const OUTPUT_FILENAME: &str = "examples.README.doc.md";

fn main() {
	println!("cargo:rerun-if-changed={INPUT_PATH}");

	generate_doc_readme();
}

fn generate_doc_readme() {
	let output_path = Path::new(OUTPUT_DIR).join(OUTPUT_FILENAME);

	// Create output directory if it doesn't exist
	if let Err(e) = fs::create_dir_all(OUTPUT_DIR) {
		eprintln!("Warning: Failed to create {OUTPUT_DIR} directory: {e}");
		return;
	}

	// Read the original README
	let content = match fs::read_to_string(INPUT_PATH) {
		| Ok(content) => content,
		| Err(e) => {
			eprintln!("Warning: Failed to read {INPUT_PATH}: {e}");
			return;
		}
	};

	// Transform GitHub links to rust doc links
	let transformed_content = transform_example_links(&content);

	// Write the transformed content
	if let Err(e) = fs::write(&output_path, transformed_content) {
		eprintln!("Warning: Failed to write {}: {}", output_path.display(), e);
	} else {
		println!("Generated {}", output_path.display());
	}
}

fn transform_example_links(content: &str) -> String {
	// Add auto-generation warning at the top
	let header = format!(
		"<!-- \nTHIS FILE IS AUTO-GENERATED BY build.rs\n\nDO NOT EDIT THIS \
		 FILE DIRECTLY!\nInstead, edit {INPUT_PATH} and run `cargo build` to \
		 regenerate.\n-->\n\n"
	);

	// Regex to match links with #example marker
	// Pattern: [filename.rs](path#example) -> [filename.rs](example_modulename/index.html)
	let re = Regex::new(r"\[([^]]+\.rs)\]\([^)]*#example\)").unwrap();

	let transformed_content = re
		.replace_all(content, |caps: &regex::Captures| {
			let filename = &caps[1];

			// Extract module name from filename (remove .rs extension)
			let module_name = filename.replace(".rs", "");

			// Generate rust doc link
			format!("[{filename}](example_{module_name}/index.html)")
		})
		.to_string();

	format!("{header}{transformed_content}")
}
