name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust:
          #- stable
          #- beta
          #- nightly
          - 1.85.1  # MSRV
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: clippy, rustfmt
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: |
        rustup toolchain install nightly --component rustfmt
        cargo +nightly fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Build
      run: cargo build --verbose --all-features
    
    - name: Run tests
      run: cargo test --verbose --all-features
    
    - name: Run doctests
      run: cargo test --doc --all-features

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      emqx:
        image: emqx/emqx:latest
        ports:
          - 1883:1883
          - 8883:8883
        env:
          EMQX_DASHBOARD__DEFAULT_USERNAME: admin
          EMQX_DASHBOARD__DEFAULT_PASSWORD: public
        options: >-
          --health-cmd "/opt/emqx/bin/emqx ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run integration tests
      run: |
        cargo test --test integration -- --test-threads=1
        # Run TLS tests if TLS examples exist
        if [ -f "examples/004_hello_world_tls.rs" ]; then
          cargo test --test integration_tls -- --test-threads=1 || echo "TLS tests not yet implemented"
        fi
      env:
        MQTT_BROKER_URL: mqtt://localhost:1883
        MQTTS_BROKER_URL: mqtts://localhost:8883

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build documentation
      run: cargo doc --all-features --no-deps
      env:
        RUSTDOCFLAGS: -D warnings

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Security audit
      run: |
        cargo install cargo-audit
        cargo audit
    
    - name: Check licenses
      run: |
        cargo install cargo-deny
        cargo deny check licenses

  examples:
    name: Examples
    runs-on: ubuntu-latest
    
    services:
      emqx:
        image: emqx/emqx:latest
        ports:
          - 1883:1883
        env:
          EMQX_DASHBOARD__DEFAULT_USERNAME: admin
          EMQX_DASHBOARD__DEFAULT_PASSWORD: public
        options: >-
          --health-cmd "/opt/emqx/bin/emqx ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Test basic examples
      run: |
        timeout 30s cargo run --example 000_hello_world || echo "Example completed or timed out"
        timeout 30s cargo run --example 001_ping_pong || echo "Example completed or timed out"
      env:
        MQTT_BROKER_URL: mqtt://localhost:1883
